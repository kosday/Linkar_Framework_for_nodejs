var DBMV_Mark = require('./DBMV_Mark')

/*
	Class: RecordIdType
		Object that works as an argument in <NewOptions> function and defines the technique for generating item IDs.
		
	Property: ActiveTypeLinkar
		boolean
		
		Indicates that the RecordIdType *Linkar* is enabled.
		
	Property: ActiveTypeRandom
		boolean
		
		Indicates that the RecordIdType *Random* is enabled.

	Property: ActiveTypeCustom
		boolean
		
		Indicates that the RecordIdType *Custom* is enabled.
		
	Property: Prefix
		string
		
		(For RecoverIdType *Linkar*)
		A prefix to the code.
		
	Property: Separator
		string
		
		(For RecoverIdType *Linkar*)
		The separator between the prefix and the code.
		The allowed separators list is: ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~
		
	Property: FormatSpec
		string
		
		(For RecoverIdType *Linkar*)
		The code format, under the Database syntax.
	
	Property: Numeric
		boolean
		
		(For RecoverIdType *Random*)
		Indicates if the code must be numeric.
		
	Property: Length
		number
		
		(For RecoverIdType *Random*)
		Length of the code to create. It must be bigger than 0.
*/
class RecordIdType
{
    // NONE
	/*
		Constructor: constructor
			 No item ID generation technique will be used. The item IDs must be supplied in the New operations.
	*/
    constructor(){

    }

    // LINKAR
	/*
		Function: Linkar
			Function accepts options for generating *Linkar* item IDs.

		Arguments:
			prefix - (string) Adding a prefix to the item ID.
			separator - (string) The separator between the prefix and the ID. Valid delimiters: ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~
			formatSpec - (string) Conversion format for the item ID. Use database-specific syntax.
	*/
    Linkar(prefix, separator, formatSpec){
        this.ActiveTypeLinkar = true;
        this.Prefix = prefix;
        this.Separator = separator;
        this.FormatSpec = formatSpec;
    }

    // RANDOM
	/*
		Function: Random
			Function accepts options for generating *Random* item IDs.
			
		Arguments:
			numeric - (boolean) Indicates if the item ID must be numeric.
			length - (number) Length of the item ID to create. Must be greater than 0.
	*/
    Random(numeric, length){
        this.ActiveTypeRandom = true;
        this.Numeric = numeric;
        this.Length = length;
    }

    // CUSTOM
	/*
		Function: Custom
			Function accepts options for generating *Custom* item IDs.
			Item IDs are generated by SUB.LK.MAIN.NEWRECOVERRECORDID.CUSTOM.
	*/
    Custom(){
        this.ActiveTypeCustom = true;
    }
	
	/*
		Function: GetStringAM
			Composes the RecordIdType options string for processing through LinkarSERVER to the database.
			
		Returns:
			string
			
			The string ready to be used by LinkarSERVER.
	*/
	GetStringAM()
	{
		var opLinkar;
		if (this.ActiveTypeLinkar)
			opLinkar = "1" + DBMV_Mark.VM_str + this.Prefix + DBMV_Mark.VM_str + this.Separator + DBMV_Mark.VM_str + this.FormatSpec;
		else
			opLinkar = "0" + DBMV_Mark.VM_str + "" + DBMV_Mark.VM_str + "" + DBMV_Mark.VM_str + "";
	
		var opRamdom;
		if (this._ActiveTypeRandom)
			opRamdom = "1" + DBMV_Mark.VM_str + (this.Numeric ? "1" : "0") + DBMV_Mark.VM_str + this.Length;
		else
			opRamdom = "0" + DBMV_Mark.VM_str + "" + DBMV_Mark.VM_str + "";
	
		var str = opLinkar + DBMV_Mark.AM_str +
					(this._ActiveTypeCustom ? "1" : "0") + DBMV_Mark.AM_str +
					opRamdom;
	
		return str;
	}	
}

module.exports = {RecordIdType}
